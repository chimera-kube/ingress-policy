// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeTmpEasyjson(in *jlexer.Lexer, out *RawSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "requireTLS":
			out.RequireTls = bool(in.Bool())
		case "allowPorts":
			if in.IsNull() {
				in.Skip()
				out.AllowPorts = nil
			} else {
				in.Delim('[')
				if out.AllowPorts == nil {
					if !in.IsDelim(']') {
						out.AllowPorts = make([]uint64, 0, 8)
					} else {
						out.AllowPorts = []uint64{}
					}
				} else {
					out.AllowPorts = (out.AllowPorts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 uint64
					v1 = uint64(in.Uint64())
					out.AllowPorts = append(out.AllowPorts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "denyPorts":
			if in.IsNull() {
				in.Skip()
				out.DenyPorts = nil
			} else {
				in.Delim('[')
				if out.DenyPorts == nil {
					if !in.IsDelim(']') {
						out.DenyPorts = make([]uint64, 0, 8)
					} else {
						out.DenyPorts = []uint64{}
					}
				} else {
					out.DenyPorts = (out.DenyPorts)[:0]
				}
				for !in.IsDelim(']') {
					var v2 uint64
					v2 = uint64(in.Uint64())
					out.DenyPorts = append(out.DenyPorts, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeTmpEasyjson(out *jwriter.Writer, in RawSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"requireTLS\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.RequireTls))
	}
	{
		const prefix string = ",\"allowPorts\":"
		out.RawString(prefix)
		if in.AllowPorts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.AllowPorts {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"denyPorts\":"
		out.RawString(prefix)
		if in.DenyPorts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.DenyPorts {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeTmpEasyjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeTmpEasyjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeTmpEasyjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeTmpEasyjson(l, v)
}
